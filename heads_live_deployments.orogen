name "heads_live_deployments"

using_task_library 'canbus'
using_task_library 'canopen_master'
using_task_library 'motors_elmo_ds402'
using_task_library 'imu_advanced_navigation_anpp'
using_task_library 'slave_scheduler'
using_task_library 'heads_control'
using_task_library 'joint_range_safety'
using_task_library 'joint_tools'

using_library 'canopen_master'

import_types_from 'base'
import_types_from 'heads_live_deploymentsTypes.hpp'

PERIOD = 0.003
LOW_LEVEL_PRIORITY = 10

# Base task implementation for the motor driver schedulers
#
# It assumes that it has peers called 'yaw_motor_driver', 'pitch_motor_driver'
# and 'roll_motor_driver'
task_context 'MotorDriverScheduler' do
    property 'resync_timeout', '/base/Time'

    # Joint message coming from the Yaw motor driver
    input_port 'yaw_joint',   '/base/samples/Joints'
    # Joint message coming from the Pitch motor driver
    input_port 'pitch_joint', '/base/samples/Joints'
    # Joint message coming from the Roll motor driver
    input_port 'roll_joint',  '/base/samples/Joints'

    # Port used to trigger whenever a new CAN message is received
    # This will cause the scheduler to update the motor drivers
    input_port('can_messages', '/canbus/Message').
        multiplexes

    # Reception of SYNC messages, when used as a trigger
    input_port 'sync_messages', '/canbus/Message'
    # Reception of IMU messages, when used as a trigger
    input_port 'imu_messages', '/base/samples/RigidBodyState'

    output_port 'joint_samples', '/base/samples/Joints'
    output_port 'sync', '/canbus/Message'
    output_port 'skipped_sync', '/heads_live_deployments/SkippedSync'
    output_port 'stats', '/heads_live_deployments/MotorSyncStats'

    port_driven :can_messages
    port_driven :sync_messages
    port_driven :imu_messages

    runtime_states :LOST_SYNC
end

deployment 'sync_generator' do
    task('sync', 'canopen_master::SyncTask').
        periodic(PERIOD)
    add_default_logger
end

task_context 'MotorWriterDispatcher', subclasses: 'slave_scheduler::OrderedSchedulingTask' do
    input_port 'joints', '/base/commands/Joints'
    output_port 'yaw', '/base/commands/Joints'
    output_port 'pitch', '/base/commands/Joints'
    output_port 'roll', '/base/commands/Joints'
    port_driven
end

deployment 'motor_drivers' do
    task('sync', 'canopen_master::SyncTask').
        periodic(PERIOD).
        realtime.
        priority(LOW_LEVEL_PRIORITY)

    task('spatial', 'imu_advanced_navigation_anpp::Task').
        realtime.
        priority(LOW_LEVEL_PRIORITY)

    task('can0', 'canbus::Task').
        realtime.
        priority(LOW_LEVEL_PRIORITY)

    tasks = [
        task('yaw_motor_r', 'motors_elmo_ds402::ReaderTask'),
        task('pitch_motor_r', 'motors_elmo_ds402::ReaderTask'),
        task('roll_motor_r', 'motors_elmo_ds402::ReaderTask')
    ]
    scheduler = task('motor_scheduler', 'MotorDriverScheduler').
        realtime.
        priority(LOW_LEVEL_PRIORITY-1)
    tasks.each { |t| t.slave_of(scheduler) }

    task('motor_w_limiter', 'joint_range_safety::ConstantPositionEnforcer').
        realtime.
        priority(LOW_LEVEL_PRIORITY-1)

    tasks = [
        task('yaw_w', 'motors_elmo_ds402::WriterTask'),
        task('pitch_w', 'motors_elmo_ds402::WriterTask'),
        task('roll_w', 'motors_elmo_ds402::WriterTask')
    ]
    dispatcher = task('motor_w_dispatcher', 'MotorWriterDispatcher').
        realtime.
        priority(LOW_LEVEL_PRIORITY-1)
    tasks.each { |t| t.slave_of(dispatcher) }

    add_default_logger.
        periodic(0.020)
end

deployment 'control_network' do
    tasks = [
        task('symetrie', 'heads_control::SymetrieDriverTask'),
        task('effort_pwm_positioner', 'joint_tools::EffortPWMPositionerTask'),
        task('joint_obs', 'heads_control::JointMotionObserverTask'),
        task('joint_obs_1', 'heads_control::JointMotionObserverTask'),
        task('joint_obs_2', 'heads_control::JointMotionObserverTask'),
        task('joint_obs_3', 'heads_control::JointMotionObserverTask'),
        task('joint_obs_4', 'heads_control::JointMotionObserverTask'),
        task('camera_body_to_inertial', 'heads_control::BodyToInertialTask'),
        task('base_body_to_inertial', 'heads_control::BodyToInertialTask'),
        task('traj_plan', 'heads_control::TrajectoryPlannerTask'),
        task('traj_plan_orientation', 'heads_control::TrajectoryPlannerOrientationTask'),
        task('camera_ref', 'heads_control::CameraReferenceTask'),
        task('ne', 'heads_control::NETask'),
        task('ctpid', 'heads_control::OperationalSpaceCTPIDTask'),
        task('joint_ctpid', 'heads_control::JointSpaceCTPIDTask'),
        task('ppi', 'heads_control::JointSpacePPITask'),
        task('operational_to_joint_space', 'heads_control::OperationalToJointSpaceTask'),
        task('joint_ref', 'heads_control::JointMotionReferenceTask'),
        task('friction_identification', 'heads_control::FrictionIdentificationTask'),
        task('joints_to_time', 'heads_control::JointsToTimeTask'),
        task('yaw_joint_pid', 'heads_control::JointPIDTask'),
        task('pitch_joint_pid', 'heads_control::JointPIDTask'),
        task('roll_joint_pid', 'heads_control::JointPIDTask'),
        task('friction_compensation', 'heads_control::FrictionCompensationTask')
    ]
    tasks.each do |t|
        t.realtime.priority(LOW_LEVEL_PRIORITY-1)
    end

    add_default_logger.
        periodic(0.020)
end

